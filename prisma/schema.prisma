generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  name        String
  password    String
  avatar      String?
  isVerified  Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  cvs         CV[]
  matches     JobMatch[]
  quizAnswers QuizAnswer[]
}

model CV {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  fileUrl   String? // URL to uploaded CV file (e.g., S3 or local storage)
  content   String // Extracted text from CV
  skills    String[] // Array of extracted skills (e.g., ["JavaScript", "Node.js"])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  matches   JobMatch[] // Matches associated with this CV
}

model JobDescription {
  id        String     @id @default(cuid())
  title     String // Job title (e.g., "Frontend Developer")
  company   String? // Company name (optional)
  content   String // Full job description text
  skills    String[] // Array of required skills (e.g., ["React", "TypeScript"])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  matches   JobMatch[] // Matches associated with this job
  quizzes   Quiz[] // Quizzes tied to this job for coaching
}

model JobMatch {
  id          String         @id @default(cuid())
  userId      String
  cvId        String
  jobDescId   String
  user        User           @relation(fields: [userId], references: [id])
  cv          CV             @relation(fields: [cvId], references: [id])
  jobDesc     JobDescription @relation(fields: [jobDescId], references: [id])
  matchScore  Float // Match score (e.g., 0.85 for 85%)
  suggestions String[] // Suggestions to improve CV (e.g., ["Add 'React' to skills"])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Quiz {
  id              String         @id @default(cuid())
  jobDescId       String
  jobDesc         JobDescription @relation(fields: [jobDescId], references: [id])
  title           String // Quiz title (e.g., "Frontend Dev Interview Prep")
  isAutoGenerated Boolean // Flag if quiz was auto-generated by AI
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  questions       Question[] // Questions in this quiz
}

model Question {
  id              String       @id @default(cuid())
  quizId          String
  quiz            Quiz         @relation(fields: [quizId], references: [id])
  text            String // Question text (e.g., "What is React's useState hook?")
  options         String[] // Array of answer options (e.g., ["A", "B", "C", "D"])
  correctOption   String // Correct answer (e.g., "B")
  explanation     String // AI-generated explanation for correct/incorrect answers
  skill           String? // Skill this question tests (e.g., "React")
  isAutoGenerated Boolean // Flag if question was auto-generated by AI
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  answers         QuizAnswer[] // User answers for this question
}

model QuizAnswer {
  id             String   @id @default(cuid())
  userId         String
  questionId     String
  user           User     @relation(fields: [userId], references: [id])
  question       Question @relation(fields: [questionId], references: [id])
  selectedOption String // User's selected answer (e.g., "A")
  isCorrect      Boolean // Whether the answer is correct
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
